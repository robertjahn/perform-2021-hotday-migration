#!/bin/bash

if [ -z "$DT_BASEURL" ]
then
    echo "Missing DT_BASEURL environment variable"
    exit 1
fi

if [ -z "$DT_API_TOKEN" ]
then
    echo "Missing DT_API_TOKEN environment variable"
    exit 1
fi

# generic add function
addConfig() {

  CONFIG_VERSION=${1}   # pass in v2 -or- config/v1
  CONFIG_API_NAME=${2}
  CONFIG_NAME=${3}
  CONFIG_FILE=${4}

  if ! [ -f "$CONFIG_FILE" ]; then
    echo "==================================================================================="
    echo "SKIPPING $CONFIG_API_NAME $CONFIG_NAME"
    echo "Missing $CONFIG_FILE file"
    exit
  fi

  echo "==================================================================================="
  echo "Calling: $DT_BASEURL/api/$CONFIG_VERSION/$CONFIG_API_NAME"
  echo "Checking if $CONFIG_API_NAME $CONFIG_NAME exists"

  if [ "$CONFIG_API_NAME" == "slo" ]
  then
    DT_ID=$(curl -s -X GET \
    "$DT_BASEURL/api/$CONFIG_VERSION/$CONFIG_API_NAME?Api-Token=$DT_API_TOKEN" \
    -H 'Content-Type: application/json' \
    -H 'cache-control: no-cache' \
    | jq -r '.slo[] | select(.name == "'${CONFIG_NAME}'") | .id')
  else
    DT_ID=$(curl -s -X GET \
    "$DT_BASEURL/api/$CONFIG_VERSION/$CONFIG_API_NAME?Api-Token=$DT_API_TOKEN" \
    -H 'Content-Type: application/json' \
    -H 'cache-control: no-cache' \
    | jq -r '.values[] | select(.name == "'${CONFIG_NAME}'") | .id')
  fi    
  # if exists, then delete it
  if [ "$DT_ID" != "" ]
  then
    echo "Deleting $CONFIG_API_NAME $CONFIG_NAME (ID = $DT_ID)"
    curl -X DELETE \
    "$DT_BASEURL/api/$CONFIG_VERSION/$CONFIG_API_NAME/$DT_ID?Api-Token=$DT_API_TOKEN" \
    -H 'Content-Type: application/json' \
    -H 'cache-control: no-cache'
    
    echo "Waiting 10 seconds to ensure $CONFIG_NAME is deleted"
    sleep 10
  else
    echo "$CONFIG_API_NAME $CONFIG_NAME does not exist"
  fi

  echo "Adding $CONFIG_API_NAME $CONFIG_NAME"
  if [ "$CONFIG_API_NAME" == "slo" ]
  then
    curl -X POST \
    "$DT_BASEURL/api/$CONFIG_VERSION/$CONFIG_API_NAME?Api-Token=$DT_API_TOKEN" \
    -H 'Content-Type: application/json' \
    -H 'cache-control: no-cache' \
    -d @$CONFIG_FILE
  else
    DT_ID=$(
      curl -X POST \
      "$DT_BASEURL/api/$CONFIG_VERSION/$CONFIG_API_NAME?Api-Token=$DT_API_TOKEN" \
      -H 'Content-Type: application/json' \
      -H 'cache-control: no-cache' \
      -d @$CONFIG_FILE \
      | jq -r '.id')
    echo "Created $CONFIG_NAME (ID=$DT_ID)"
  fi
}

deleteConfig() {

  CONFIG_API_NAME=${1}
  CONFIG_NAME=${2}

  echo "==================================================================================="
  echo "Checking if $CONFIG_API_NAME $CONFIG_NAME exists"
  # list stored in an array called values[] - ONLY get the first one.  
  DT_ID=$(curl -s -X GET \
    "$DT_BASEURL/api/config/v1/$CONFIG_API_NAME?Api-Token=$DT_API_TOKEN" \
    -H 'Content-Type: application/json' \
    -H 'cache-control: no-cache' \
    | jq -r '.values[] | select(.name == "'${CONFIG_NAME}'") | .id' | head -1)

  # if exists, then delete it
  if [ "$DT_ID" != "" ];then
    echo "Deleting $CONFIG_API_NAME $CONFIG_NAME (ID = $DT_ID)"
    curl -X DELETE \
    "$DT_BASEURL/api/config/v1/$CONFIG_API_NAME/$DT_ID?Api-Token=$DT_API_TOKEN" \
    -H 'Content-Type: application/json' \
    -H 'cache-control: no-cache'
  else
    echo "$CONFIG_API_NAME $CONFIG_NAME does not exist"
  fi

}

# this function used to create the JSON files
# be sure to delete the 'metadata' and 'id' before using it in the add
getConfig() {

  CONFIG_API_NAME=${1}
  CONFIG_NAME=${2}

  echo "==================================================================================="
  echo "Getting $CONFIG_API_NAME $CONFIG_NAME"

  DT_ID=$(curl -s -X GET \
    "$DT_BASEURL/api/config/v1/$CONFIG_API_NAME?Api-Token=$DT_API_TOKEN" \
    -H 'Content-Type: application/json' \
    -H 'cache-control: no-cache' \
    | jq -r '.values[] | select(.name == "'${CONFIG_NAME}'") | .id')

  # if exists, then get it
  if [ "$DT_ID" != "" ]
  then
    curl -s -X GET \
        "$DT_BASEURL/api/config/v1/$CONFIG_API_NAME/$DT_ID?Api-Token=$DT_API_TOKEN" \
        -H 'Content-Type: application/json' \
        -H 'cache-control: no-cache'  \
        | jq -r '.'
  else
    echo "$CONFIG_API_NAME $CONFIG_NAME does not exist"
  fi
}

addApplicationRule() {

  ID=$1
  CONFIG_FILE=$2

  CONFIG_API_NAME="applicationDetectionRules"
  echo ""
  echo "Adding applicationDetectionRules $CONFIG_FILE to ID=$ID"

  cat ./dynatrace/$CONFIG_FILE | \
    sed 's~applicationIdentifier.*~'applicationIdentifier"\": \"$ID"\",'~' > ./dynatrace/gen/$CONFIG_FILE

  curl -s -X POST \
    "$DT_BASEURL/api/config/v1/$CONFIG_API_NAME?Api-Token=$DT_API_TOKEN" \
    -H 'Content-Type: application/json' \
    -H 'cache-control: no-cache' \
    -d @./dynatrace/gen/$CONFIG_FILE
}

setServiceAnomalyDetection() {
  CONFIG_FILE=$1

  echo "==================================================================================="
  echo "Setting ServiceAnomalyDetection"

  curl -L -X PUT \
    "$DT_BASEURL/api/config/v1/anomalyDetection/services?Api-Token=$DT_API_TOKEN" \
    -H 'Content-Type: application/json' \
    -H 'cache-control: no-cache' \
    -d @$CONFIG_FILE
}

setFrequentIssueDetectionOff() {

  echo "==================================================================================="
  echo "Setting FrequentIssueDetection OFF"

  curl -L -X PUT \
    "$DT_BASEURL/api/config/v1/frequentIssueDetection?Api-Token=$DT_API_TOKEN" \
    -H 'Content-Type: application/json' \
    -H 'cache-control: no-cache' \
    --data-raw '{
        "frequentIssueDetectionApplicationEnabled": false,
        "frequentIssueDetectionServiceEnabled": false,
        "frequentIssueDetectionInfrastructureEnabled": false
    }'
}

setFrequentIssueDetectionOn() {

  echo "==================================================================================="
  echo "Setting FrequentIssueDetection ON"

  curl -L -X PUT \
    "$DT_BASEURL/api/config/v1/frequentIssueDetection?Api-Token=$DT_API_TOKEN" \
    -H 'Content-Type: application/json' \
    -H 'cache-control: no-cache' \
    --data-raw '{
        "frequentIssueDetectionApplicationEnabled": true,
        "frequentIssueDetectionServiceEnabled": true,
        "frequentIssueDetectionInfrastructureEnabled": true
    }'
}

